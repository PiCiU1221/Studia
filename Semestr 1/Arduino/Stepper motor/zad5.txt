#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11

unsigned long previousMicros, currentMicros = 0;
unsigned long interval = 0;
const int lengthSeq = 8;
int Step, stepCount = 0;

// zmienne do funkcji
int wybor = 0;
int rpm = 10;
bool clockWise = true;
int stepLimit = 0;
int rotations = 1;

int stepsMatrix[lengthSeq][4] = {
	{0, 0, 0, 1}, // 0
	{0, 0, 1, 1}, // 1
	{0, 0, 1, 0}, // 2
	{0, 1, 1, 0}, // 3
	{0, 1, 0, 0}, // 4
	{1, 1, 0, 0}, // 5
	{1, 0, 0, 0}, // 6
	{1, 0, 0, 1}, // 7
};

void funkcja (int wybor, int rpm, bool clockWise, int stepLimit, int rotations) {
	currentMicros = micros();
	interval = 1000000/(32 * rpm / 60);
	if (stepLimit == 0) {
		stepLimit = 32 * rotations;
	}
	
	if (currentMicros - previousMicros >= interval) {
		previousMicros = currentMicros;
		if (stepCount <= stepLimit) {
			switch (wybor) {
			case 0:
				digitalWrite(IN1, stepsMatrix[(Step%4)*2][0]);
				digitalWrite(IN2, stepsMatrix[(Step%4)*2][1]);
				digitalWrite(IN3, stepsMatrix[(Step%4)*2][2]);
				digitalWrite(IN4, stepsMatrix[(Step%4)*2][3]);
				break;
			case 1:
				digitalWrite(IN1, stepsMatrix[(Step%4)*2+1][0]);
				digitalWrite(IN2, stepsMatrix[(Step%4)*2+1][1]);
				digitalWrite(IN3, stepsMatrix[(Step%4)*2+1][2]);
				digitalWrite(IN4, stepsMatrix[(Step%4)*2+1][3]);
				break;
			case 2:
				digitalWrite(IN1, stepsMatrix[Step%8][0]);
				digitalWrite(IN2, stepsMatrix[Step%8][1]);
				digitalWrite(IN3, stepsMatrix[Step%8][2]);
				digitalWrite(IN4, stepsMatrix[Step%8][3]);
				break;
			}
			if (clockWise == true) {
				Step++;
			} else if (clockWise == false) {
				Step--;
				if (Step < 0) {
					Step = 7;
				}
			}
			stepCount++;
		}
	}
}

void setup() {
	pinMode(IN1, OUTPUT);
	pinMode(IN2, OUTPUT);
	pinMode(IN3, OUTPUT);
	pinMode(IN4, OUTPUT);
}

void loop() {
	funkcja(wybor, rpm, clockWise, stepLimit, rotations);
}