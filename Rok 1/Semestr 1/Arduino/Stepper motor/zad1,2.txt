#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11

unsigned long previousMillis, currentMillis = 0;
unsigned long interval = 0;
const int lengthSeq = 8;
int Step = 0;

// ilosc krokow ( 32 - symulator, 4096 - prawdziwy)
int stepNumber = 32;

// zmienne do funkcji
int wybor = 1;
int rpm = 10;

int stepsMatrix[lengthSeq][4] = {
	{0, 0, 0, 1}, // 0
	{0, 0, 1, 1}, // 1
	{0, 0, 1, 0}, // 2
	{0, 1, 1, 0}, // 3
	{0, 1, 0, 0}, // 4
	{1, 1, 0, 0}, // 5
	{1, 0, 0, 0}, // 6
	{1, 0, 0, 1}, // 7
};

void funkcja (int wybor, int rpm) {
	currentMillis = millis();
	interval = 1000/(stepNumber * rpm / 60);
	
	if (currentMillis - previousMillis >= interval) {
		previousMillis = currentMillis;
		switch (wybor) {
		case 0:
			digitalWrite(IN1, stepsMatrix[(Step%4)*2][0]);
			digitalWrite(IN2, stepsMatrix[(Step%4)*2][1]);
			digitalWrite(IN3, stepsMatrix[(Step%4)*2][2]);
			digitalWrite(IN4, stepsMatrix[(Step%4)*2][3]);
			break;
		case 1:
			digitalWrite(IN1, stepsMatrix[(Step%4)*2+1][0]);
			digitalWrite(IN2, stepsMatrix[(Step%4)*2+1][1]);
			digitalWrite(IN3, stepsMatrix[(Step%4)*2+1][2]);
			digitalWrite(IN4, stepsMatrix[(Step%4)*2+1][3]);
			break;
		case 2:
			digitalWrite(IN1, stepsMatrix[Step%8][0]);
			digitalWrite(IN2, stepsMatrix[Step%8][1]);
			digitalWrite(IN3, stepsMatrix[Step%8][2]);
			digitalWrite(IN4, stepsMatrix[Step%8][3]);
			break;
		}
		Step++;
	}
}

void setup() {
	pinMode(IN1, OUTPUT);
	pinMode(IN2, OUTPUT);
	pinMode(IN3, OUTPUT);
	pinMode(IN4, OUTPUT);
}

void loop() {
	funkcja(wybor, rpm);
}